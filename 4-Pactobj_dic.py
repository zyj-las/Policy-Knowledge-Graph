import pandas as pd
import jieba

# 读取Excel文件
file_path = r"D:\paragraph.csv"
df = pd.read_csv(file_path)
# 扩展词典
ac_group = {
    "ag1": ["咨询专家","评审专家","领导","干部", "管理人员", "负责人", "评估人员","评审组织者", "审计人员",
            "科研财务助理","财务人员","期刊评审","期刊工作者", "编辑", "出版人", "管理者", "领导者", "专职人员",
            "行政人员","科技管理工作者","工作人员","工作者","编辑出版专业技术人员","评估人员","委员会主任","办公室主任",
            "委员","法人","审者","编者","管理专家"],
    "ag2": ["科研人员", "科技人员","研究人员","实验技术人员","科学技术人员","科学家","科研者","科学工作者", "科技工作者",
            "研究者","院士", "候选人","被推荐人","被提名人","学位获得者","学位申请人","项目申请人","项目负责人","课题负责人",
            "教授", "研究员","教师", "导师", "讲师", "学生", "研究生", "博士", "硕士","博士后","团队成员","青年人才","科技人才",
            "人才","学术带头人","学术新人","专家","学者","著者","合著者","作者","合作者","会员","工程师","通讯作者","第一作者"],
    "ag3": ["调查组", "专家组", "调查人员", "调查对象", "被调查人", "被举报人", "当事人", "责任人", "举报人","证人", 
            "不良诚信记录者", "检查人员", "审查人员","举报对象","投诉人","被投诉人","投诉对象","科研不端行为人","科研失信行为人"],
    "ag4": ["公众", "群众", "民众","人民","读者","受试者"]
}

ac_thing = {
    "at1": ["科研记录", "档案", "材料", "数据", "样本", "试剂", "研究数据", "实验数据", "记录","失信行为信息","科研诚信基础信息","良好行为信息",
            "信用档案","信用记录","诚信记录档案","诚信档案","数据档案","技术档案","知情同意书","科研诚信承诺书","科研诚信信息"],
    "at2": ["研究成果","科研成果","科技成果","科学技术成果", "科研成就","成果", "论文", "报告", "专利", "专著", 
            "技术", "图书", "书籍", "著作"],
    "at3": ["研究项目", "科研项目","科技项目","项目", "合同", "基金","课题","经费","资金"],
    "at4": ["学位", "文凭", "科学技术成果奖励","奖励", "资历", "学历", "荣誉", "资格","国家科技奖","资质"],
    "at5": ["举报信","投诉信","投诉材料","举报材料","调查材料","调查核实材料","证据","调查报告","证明材料","处理决定书",
            "复查报告","谈话笔录","陈述材料","书面报告","科研诚信严重失信行为数据库"]
}
#ao1:国务院组成部门、中央机构；ao2：国务院直属机构、直属事业单位、直属特设机构、部委管理的国家局；ao3：高校、科研院所、企业、社会组织；ao4：工会、学会、协会、联合会、研究会等社会组织
ac_org = {
    "ao1" : ["行政部门", "党政机关", "各级政府", "行政单位","行政机关","地方政府","司法机关","检察机关", 
             "有关部门","人民政府","财政部门","主管部门","管理部门","科研管理部门","科技管理部门",
             "中共中央", "国务院", "全国人民代表大会" , "全国人民代表大会常务委员会" , "中央军事委员会","国家监察委员会",
             "国务院办公厅" , "工业和信息化部" ,"教育部","教育厅","教委","教育局", "科技部" ,"科学技术部",  "人事部" , "财政部" ,"国家安全部","司法部" ,
             "文化和旅游部" ,"应急管理部" ,"民政部" , "人力资源和社会保障部" ,"人力资源社会保障部", "中国人民解放军总装备部" , "卫生部" ,"农业农村部" ,"自然资源部" ,
             "住房和城乡建设部", "住房城乡建设部" , "交通运输部" , "水利部" , "商务部" ,"外交部",
             "审计署","公安部","公安", "最高人民法院","最高法院", "最高人民检察院","最高检察院",             
             "国家卫生健康委员会","卫健委","卫生健康委","国家卫生和计划生育委员会" ,"国家科学技术委员会","国家科委","国家发展和改革委员会", "国家发展改革委" ,"发改委","国家民族事务委员会",  
             "中央军事委员会装备发展部","中央军委装备发展部" ,"中央军委科学技术委员会", "中共教育部党组" ,"中共中央纪律检查委员会",
             "中央宣传部","中宣部","中央网络安全和信息化委员会" ,"共青团中央" ,"中共中央办公厅" ,"中央组织部" ,"中央机构编制委员会" ,"中央机构编制委员会办公室","中共中央政策研究室", 
             "中央精神文明建设指导委员会","中央纪律检查委员会","中共中央纪委", "中央纪委","纪委",
             "中央网络安全和信息化委员会办公室","中央编办","中央文明办","中央网信办" , "中国共产党全国代表大会", "中国人民银行","人民银行" ],
    "ao2" : ["监管机构","科技管理机构","管理单位","项目管理机构","监察审计机构","项目管理专业机构",
            "中国科学院","中科院", "中国工程院","工程院","中国社会科学院","中国社科院","社科院","国家自然科学基金委员会", "国家自然基金委", "国家自然基金委员会","自然科学基金委","自然科学基金会","综合司局","专业司局","银保监会","证监会",
            "国家新闻出版署","国有资产监督管理委员会" ,"中华人民共和国海关总署","海关总署","中央广播电视总台","中国气象局","国家税务总局","税务总局","国家医疗保障局","医疗保障局","国家信访局",
            "国资委","新华通讯社","国家中医药管理局" ,"中国银行保险监督管理委员会","中国证券监督管理委员会" , "中国民用航空局" ,"民航局","国务院学位委员会",
            "中国国家铁路集团有限公司","铁路总公司" ,"国家铁路局" , "国家国防科技工业局" ,"国家科学技术奖励工作办公室" , "国家保密局","国家知识产权局","知识产权局",
            "国家新闻出版广电总局" , "国家烟草专卖局","市场监管总局","广电总局",
            "国务院发展研究中心" ,"国家国家市场监管总局","中共中央党校" ,"中央党史和文献研究院"],
    "ao3" : ["高等学校","高校",
             "科研院所","研究所","研究中心","研究院","研究院所",
             "科研机构","科技机构","研发机构","研究机构","资助机构","有关机构","科研诚信机构",
             "教育科研机构","科学技术研究开发机构","服务机构","第三方机构",
             "责任单位","责任主体","所属单位","承担单位","有关单位","所在单位","学位授予单位","提名单位",
             "企事业单位","企业","公司","事业单位",
             "出版社","学术期刊"],
    "ao4" : ["中国科学技术协会","中国科协", "学会", "协会", "研究会", "科技团体","社会组织","团体","中华全国总工会","全国总工会","工会","全国妇联","中华全国妇女联合会" ,"中国教科文卫体工会全国委员会"]
}

# 初始化新的列
df["作用群体实体"] = ""
df["作用群体"] = ""
df["作用物体实体"] = ""
df["作用物体"] = ""
df["作用主体实体"] = ""
df["作用主体"] = ""
# 定义函数进行实体抽取，并跨类别保留长度最长的实体
def extract_entities(text, entity_dict):
    entities = []  # 存储该类别所有匹配的实体
    for entity_type, keywords in entity_dict.items():
        for keyword in keywords:
            if keyword in text:
                entities.append((keyword, entity_type))
    return entities

# 跨类别保留最长实体的逻辑
def filter_longest_entities(entities_across_categories):
    # 根据实体长度进行排序，优先保留最长实体
    entities_across_categories = sorted(entities_across_categories, key=lambda x: len(x[0]), reverse=True)
    longest_entity_set = set()  # 用于记录已保留的实体
    filtered_entities = []
    for entity, entity_type in entities_across_categories:
        # 如果该实体不包含在已保留的实体中，或者它的长度大于已保留实体的长度
        if all(entity not in e for e in longest_entity_set):
            longest_entity_set.add(entity)
            filtered_entities.append((entity, entity_type))
    return filtered_entities

# 对每一行进行实体抽取
for i, row in df.iterrows():
    text = row["政策段落"]
    # 抽取所有作用主体、群体、物体实体
    org_entities = extract_entities(text, ac_org)
    actor_entities = extract_entities(text, ac_group)
    object_entities = extract_entities(text, ac_thing)
    # 跨类别的实体列表
    all_entities = actor_entities + object_entities + org_entities
    # 保留长度最长的实体
    filtered_entities = filter_longest_entities(all_entities)
    
    # 保存实体的字典，确保每个实体对应的类别是正确的
    actor_entity_dict = {entity: entity_type for entity, entity_type in filtered_entities if entity_type in ac_group}
    object_entity_dict = {entity: entity_type for entity, entity_type in filtered_entities if entity_type in ac_thing}
    org_entity_dict = {entity: entity_type for entity, entity_type in filtered_entities if entity_type in ac_org}
    
    # 分别保存作用群体和作用物体实体及其类型
    df.at[i, "作用群体实体"] = ",".join(actor_entity_dict.keys())
    df.at[i, "作用群体"] = ",".join(set(actor_entity_dict.values()))  # 确保实体类型唯一
    df.at[i, "作用物体实体"] = ",".join(object_entity_dict.keys())
    df.at[i, "作用物体"] = ",".join(set(object_entity_dict.values()))  # 确保实体类型唯一
    df.at[i, "作用主体实体"] = ",".join(org_entity_dict.keys())
    df.at[i, "作用主体"] = ",".join(set(org_entity_dict.values()))  # 确保实体类型唯一

# 保存结果到新的Excel文件
output_file_path = r"D:\act.xlsx"
df.to_excel(output_file_path, index=False)
print("实体抽取完成，结果已保存到文件:", output_file_path)